<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PushNotifications.Api</name>
    </assembly>
    <members>
        <member name="T:PushNotifications.Api.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Logging.ILog.Log(PushNotifications.Api.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:PushNotifications.Api.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:PushNotifications.Api.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:PushNotifications.Api.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:PushNotifications.Api.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:PushNotifications.Api.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.SetCurrentLogProvider(PushNotifications.Api.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:PushNotifications.Api.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PushNotifications.Api.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:PushNotifications.Api.Logging.LogProvider.SetCurrentLogProvider(PushNotifications.Api.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:PushNotifications.Api.Logging.ILog"/></returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:PushNotifications.Api.Logging.ILog"/></returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:PushNotifications.Api.Logging.ILog"/></returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:PushNotifications.Api.Logging.ILog"/></returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:PushNotifications.Api.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PushNotifications.Api.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Discovery.HealthCheckController.Discovery">
            <summary>
            Health Check endpoint
            </summary>
            <returns>Ok</returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.PushNotificationsController.Send(PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel)">
            <summary>
            Sends push notification with notification payload. This endpoint is accessable only with admin scope.
            Sending of push notification won't be trigger if existing subscription is not found for specified subscriber
            Restricted with admin scope
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.PushNotificationsTopicsController.SendToTopic(PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel)">
            <summary>
            Sends push notification with notification payload. This endpoint is accessable only with admin scope.
            This sends a push notification to a given topic. Every device subscribed to a topic will be delivered a push notification.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.FireBaseSubscribeController.SubscribeToFireBase(PushNotifications.Api.Controllers.Subscriptions.Commands.FireBaseSubscribeModel)">
            <summary>
            Subscribes for push notifications with FireBase token
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.TopicSubscribeController.SubscribeToTopic(PushNotifications.Api.Controllers.Subscriptions.Commands.TopicSubscriptionModel)">
            <summary>
            Subscribes a Subscriber for push notifications for a topic 
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.TopicUnsubscribeController.UnsubscribeFromTopic(PushNotifications.Api.Controllers.Subscriptions.Commands.TopicSubscriptionModel)">
            <summary>
            Unsubscribes a SubscriberId for push notifications from a topic [Firebase]
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.FireBaseUnSubscribeController.UnSubscribeFromFireBase(PushNotifications.Api.Controllers.Subscriptions.Commands.FireBaseSubscribeModel)">
            <summary>
            UnSubscribes from push notifications with FireBase token
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:PushNotifications.Api.Controllers.Subscriptions.Commands.FireBaseSubscribeModel.SubscriberUrn">
            <summary>
            URN of the subscriber. This must be string tenant urn
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.Subscriptions.Commands.FireBaseSubscribeModel.Token">
            <summary>
            Registration token
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Commands.PushySubscriptionController.SubscribeToPushy(PushNotifications.Api.Controllers.Subscriptions.Commands.PushySubscribeModel)">
            <summary>
            Subscribes for push notifications with Pushy token
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:PushNotifications.Api.Controllers.Subscriptions.Commands.TopicSubscriptionModel.SubscriberId">
            <summary>
            URN of the subscriber. This must be string tenant urn
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.Subscriptions.Commands.PushySubscribeModel.SubscriberUrn">
            <summary>
            URN of the subscriber. This must be string tenant urn
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.Subscriptions.Commands.PushySubscribeModel.Token">
            <summary>
            Registration token
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Controllers.Subscriptions.Queries.GetSubscriberTokensController.GetSubscriberTokens(PushNotifications.Api.Controllers.Subscriptions.Queries.GetSubscriberTokensController.SubscriberTokensModel)">
            <summary>
            Provides registered tokens for user for all delivery providers e.g FireBase, Pushy etc. Restricted for administrators
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.SubscriberUrn">
            <summary>
            URN of who should PN be send to. This must be string tenant urn
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.Title">
            <summary>
            The notification's title.
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.Body">
            <summary>
            The notification's body text
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.Sound">
            <summary>
            The sound to play when the device receives the notification
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.Icon">
            <summary>
            The notification's icon. For iOS use Badge
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.Badge">
            <summary>
            The value of the badge on the home screen app icon. If not specified, the badge is not changed. If set to 0, the badge is removed. Works for iOS
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.ExpiresAt">
            <summary>
            This parameter specifies at what time the message should be discarded if not send. By default this is set too current time plus 100 years
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.ContentAvailable">
            <summary>
            On iOS, use this field to represent content-available in the APNs payload. When a notification or message is sent and this is set to true, an inactive client app is awoken, and the message is sent through APNs as a silent notification and not through the FCM connection server. Note that silent notifications in APNs are not guaranteed to be delivered, and can depend on factors such as the user turning on Low Power Mode, force quitting the app, etc. On Android, data messages wake the app by default. On Chrome, currently not supported
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationModel.NotificationData">
            <summary>
            The payload data
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Topic">
            <summary>
            Topic which the push notification should be sent
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Tenant">
            <summary>
            The tenant to which the push notification must be delivered
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Title">
            <summary>
            The notification's title.
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Body">
            <summary>
            The notification's body text
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Sound">
            <summary>
            The sound to play when the device receives the notification
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Icon">
            <summary>
            The notification's icon. For iOS use Badge
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.Badge">
            <summary>
            The value of the badge on the home screen app icon. If not specified, the badge is not changed. If set to 0, the badge is removed. Works for iOS
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.ExpiresAt">
            <summary>
            This parameter specifies at what time the message should be discarded if not send. By default this is set too current time plus 100 years
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.ContentAvailable">
            <summary>
            On iOS, use this field to represent content-available in the APNs payload. When a notification or message is sent and this is set to true, an inactive client app is awoken, and the message is sent through APNs as a silent notification and not through the FCM connection server. Note that silent notifications in APNs are not guaranteed to be delivered, and can depend on factors such as the user turning on Low Power Mode, force quitting the app, etc. On Android, data messages wake the app by default. On Chrome, currently not supported
            </summary>
        </member>
        <member name="P:PushNotifications.Api.Controllers.PushNotifications.Models.SendPushNotificationToTopicModel.NotificationData">
            <summary>
            The payload data
            </summary>
        </member>
        <member name="M:PushNotifications.Api.Controllers.SubscriptionsTracker.GetTopicCounterController.GetTopicSubscribedCount(PushNotifications.Api.Controllers.SubscriptionsTracker.GetTopicCounterController.TopicCounter)">
            <summary>
            This endpoint is here in order to be able to track if the subscriptions to topics are correct.
            Furthermore we can easily track how many and what topics have been generated
            </summary>
            <param name="model">Contains a mandatory tenant and name which identifies the topic</param>
            <returns></returns>
        </member>
        <member name="M:Vapt.Api.Discovery.DiscoveryController.Discovery">
            <summary>
            Discovery endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vapt.Api.Discovery.NormalizedDiscoveryController.Discovery">
            <summary>
            Normalized Discovery endpoint
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
